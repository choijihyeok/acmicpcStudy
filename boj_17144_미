#include <iostream>
#include <queue>
using namespace std;
typedef pair <int, pair <int, int > > piii;
queue <piii> que;
int mp[51][51],cpmp[51][51],R,C,T;
int dy[4]={0,0,1,-1};
int dx[4]={1,-1,0,0};
int cr[2],cc[2];
void pf(int mm[][51]){
    cout << endl;
    for(int i=0; i<R; i++){
        for(int j=0; j<C; j++){
            cout << mm[i][j] << " ";
        }
        cout << endl;
    }
}
void input(){
    int tmpIdx=0;
    cin >> R >> C >> T;
    for(int i=0; i<R; i++){
        for(int j=0; j<C; j++){
            cin >> mp[i][j];
            if(mp[i][j]>0)
                que.push({mp[i][j],{i,j}});
            else if(mp[i][j]==-1){
                cr[tmpIdx]=i;
                cc[tmpIdx++]=j;
            }
        }
    }
}
int overcheck(int r,int c){
    if(r<0 || c<0 || r>=R || c>=C)
        return 1;
    else if(r==cr[0] && c==cc[0])
        return 1;
    else if(r==cr[1] && c==cc[1])
        return 1;
    else
        return 0;
}
void quing(){
    for(int i=0; i<R; i++){
        for(int j=0; j<C; j++){
            if(mp[i][j]>0){
                que.push({mp[i][j],{i,j}});
            }
        }
    }
}
void expand(){
    while(!que.empty()){
        int r=que.front().second.first;
        int c=que.front().second.second;
        int val=que.front().first;
        int cnt=0;
        que.pop();
        for(int i=0; i<4; i++){
            int nr=r+dy[i];
            int nc=c+dx[i];
            int nval=mp[r][c]/5;
            if(overcheck(nr,nc))
                continue;
            else{
                cpmp[nr][nc]+=nval;
                cnt++;
            }
        }
        cpmp[r][c]+=val-((val/5)*cnt);
    }
    for(int i=0; i<R; i++)
        for(int j=0; j<C; j++){
            mp[i][j]=cpmp[i][j];
            cpmp[i][j]=0;
        }
}
void rotation(){
    int r=cr[0];
    int c=cc[0];
    while(1){
        r--;
        if(r<0){
            r=0;
            break;
        }
        if(r==cr[0]-1){
            mp[r][c]=0;
        }else{
            mp[r+1][c]=mp[r][c];
        }
    }
    while(1){
        c++;
        if(c>=C){
            c--;
            break;
        }
        mp[r][c-1]=mp[r][c];
    }
    while(1){
        r++;
        if(r>cr[0]){
            r=cr[0];
            break;
        }
        mp[r-1][c]=mp[r][c];
    }
    while(1){
        c--;
        if(c<cc[0]){
            c=cc[0];
            break;
        }
        if(c==cc[0]){
            mp[r][c+1]=0;
        }else{
            mp[r][c+1]=mp[r][c];
        }
    }
    r=cr[1];
    c=cc[1];
    while(1){
        r++;
        if(r>=R){
            r--;
            break;
        }
        if(r==cr[1]+1){
            mp[r][c]=0;
        }else{
            mp[r-1][c]=mp[r][c];
        }
    }
    while(1){
        c++;
        if(c>=C){
            c--;
            break;
        }
        mp[r][c-1]=mp[r][c];
    }
    while(1){
        r--;
        if(r<cr[1]){
            r++;
            break;
        }
        mp[r+1][c]=mp[r][c];
    }
    while(1){
        c--;
        if(c<cc[1]){
            c++;
            break;
        }
        if(c==cc[1]){
            mp[r][c+1]=0;
        }else{
            mp[r][c+1]=mp[r][c];
        }
    }
}
int search(){
    int tmp=0;
    for(int i=0; i<R; i++){
        for(int j=0; j<C; j++){
            if(mp[i][j]>0){
                tmp+=mp[i][j];
            }
        }
    }
    return tmp;
}
int main(){
    input();
    for(int i=0; i<T; i++){
        if(i>0)
            quing();
        expand();
        rotation();
    }
    cout << search() << endl;
}

